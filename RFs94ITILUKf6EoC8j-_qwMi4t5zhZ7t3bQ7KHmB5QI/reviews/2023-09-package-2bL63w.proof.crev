----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: 2023-09-01T07:35:44.112930-07:00
from:
  id-type: crev
  id: RFs94ITILUKf6EoC8j-_qwMi4t5zhZ7t3bQ7KHmB5QI
  url: https://github.com/kpreid/crev-proofs
package:
  source: https://crates.io
  name: mint
  version: 0.5.9
  revision: 8ea6a9f531e9c15f3d79c376e38ec422c21f36c9
  digest: Or_MhW4hQNvh3jDNWliAk2y936sCpPjaBXxKVuXT5C8
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  A very straightforward library. Some complaints one could have about it:
  
  * No type documentation.
    [Some was contributed but the PR stalled](https://github.com/kvark/mint/pull/36).
  * Contains use of `unsafe` code, to provide `&`/`&mut` access to different
    interpretations of the same type (e.g. a quaternion as either
    `{Vector3<T>, T}` or as `[T; 4]`). I believe the unsafe code is correct,
    even in the presence of unusual choices of `T`.
----- SIGN CREV PROOF -----
iSfxbQoqfgAwHnWINpEd7gEe4TrQWIDg1knM0WPiKpCskuuc0aIhmSMviSy2iUobGgRmVxCQZXC28qmUjLRZAg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: 2023-09-02T11:31:09.531785-07:00
from:
  id-type: crev
  id: RFs94ITILUKf6EoC8j-_qwMi4t5zhZ7t3bQ7KHmB5QI
  url: https://github.com/kpreid/crev-proofs
package:
  source: https://crates.io
  name: png-decoder
  version: 0.1.1
  revision: 48554a59ff775ac6b048f927a291077358909f43
  digest: eLQADHfTsEj-Zeem7qJgLx_W00fQI-ermeSCTNv3ryA
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  On a quick skim, "this sure looks like a PNG decoder":
  all the code is a reasonable kind of code for what it says it does,
  but I have not reviewed it for correctness.
  
  I have also confirmed its functionality as a replacement for `image`'s
  PNG support in my use case with a few small static PNGs.
  
  Good things:
  
  * There is no `unsafe` code.
  * It seems to be taking care to return decoding errors rather than
    panicking, and the fuzz testing set up in the repository should be
    detecting such cases.
  
  Potentially problematic:
  
  * It allocates an amount of memory determined by the input image
    (using `Vec::with_capacity()`) without checks, so a malicious image
    could DoS via excessive memory use (zip bomb attack).
----- SIGN CREV PROOF -----
LZl-64pTljxhlJBCvnPcz20fuELZ1iYQu6GCayrssVqIXQPK07Cjfzn2q_p9s98nz7HSvCqwDrYNCBzviPVlBQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: 2023-09-06T11:40:30.570681-07:00
from:
  id-type: crev
  id: RFs94ITILUKf6EoC8j-_qwMi4t5zhZ7t3bQ7KHmB5QI
  url: https://github.com/kpreid/crev-proofs
package:
  source: https://crates.io
  name: euclid
  version: 0.22.9
  revision: 75bb5fcfc98a3fbcc63cf02a51c1907ce939f6d3
  digest: ss_XoC_95KduxK17ydhG1c-qkE4IXYs4bQc4cMXSijo
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  This is a preliminary "does this look okay to use" code review, writing down
  everything I noticed -- I have not yet attempted to use the library.
  
  ## Build
  
  Good.
  
  * Has `no_std` support, in the conventional fashion of a `std` feature that
    can be disabled.
  * Depends only on common interop libraries, and optionally `libm`.
    All dependencies are optional except `num-traits`.
  
  ## API design
  
  Dubious in places.
  
  * `Rect::inner_rect()` contains a `debug_assert!` that the size of the result is
    not negative, yet this is not an invariant of the type, and the potential panic
    is not documented.
  * The `approxord` module contains no items that match its module docs, just
    `max()` and `min()` for `PartialOrd` rather than only `Ord`.
  
  The following are “this doesn't exist” rather than “this exists but is bad”:
  
  * `Angle` and `Rotation2D` type are specifically radians.
    This prevents some opportunities for exact arithmetic on fractions or multiples
    of whole turns (because 360 is a rational number and 2π is not).
  * There is no `Vector4D` type, only the specific-purpose `HomogeneousVector`.
  
  ## Documentation
  
  * Many functions without docs or with not very specific docs.
  * `cast()` methods have an un-`track_caller`ed panic if the underlying
    `num_traits::NumCast` fails. On the ones which have documentation at all
    (e.g. `Length`), the description of `cast()` and `try_cast()` as "Cast" and
    "Fallible cast" respectively might lead the reader to think that the former
    is an infallible conversion, not a panicking one.
  
  ## Code
  
  * Clippy lint directives in an archaic style from before they were namespaced:
    `#![cfg_attr(feature = "cargo-clippy", allow(just_underscores_and_digits))]`
  * Superfluous `use mint;` items.
  * `approxeq.rs`:
    Default epsilons are a dubious concept in the first place, but
    particularly, using 1e-6 for f64 as well as f32 seems a bit lax.
  * `rigid.rs`:
    "All matrix multiplication in this module is in row-vector notation," which
    seems gratuitously inconsistent with most common notation and with the
    `transform2d` and `transform3d` modules. But perhaps I have misunderstood.
----- SIGN CREV PROOF -----
D7n_pFTuzflLCNwgUMDmPkQaitbnx0VABC7fzEnmyKx_MeT5E93hv3riN8qQ79xkSpkhX7CwX0JnrytXhrz6AQ
----- END CREV PROOF -----

